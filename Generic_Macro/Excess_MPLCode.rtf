{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red89\green138\blue67;\red23\green23\blue23;\red202\green202\blue202;
}
{\*\expandedcolortbl;;\cssrgb\c41569\c60000\c33333;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # if len(SeriesDict.keys()) < 3:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     Series1 = SeriesDict[keys[0]]; Series2 = SeriesDict[keys[1]]\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     for series in SeriesDict.keys(): \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #         TheSeries = SeriesDict[series]; TraceType = str(TheSeries['UnitsType']); Data = pd.Series(TheSeries['Data'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #         if  TheSeries['YScale'] == 'log'and TraceType.upper() == YoYStr.upper():\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             Data += 100\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 #     LeftTraces = \{Series1['Legend_Name']:(Series1['Data'],Series1['TraceColor'],1.5)\}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     margins = \{'top':Top, 'bottom':0.12 ,'left':0.08,'right':1-(numAxii*0.04)\}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     smolFig = plt.figure(FigureClass = Charting.BMP_Fig,margins=margins,numaxii=2,figsize=(14,7))\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     smolFig.set_Title(Series1['axlabel'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     smolFig.AddTraces(LeftTraces,LeftScale='log')\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 # RightTraces = \{Series2['Legend_Name']:(Series2['Data'],Series2['TraceColor'],1.5)\}\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # ticks, ticklabs = Utilities.EqualSpacedTicks(Series1['Data'],10,LogOrLin='log',LabOffset=-100,labSuffix='%')\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # ticks2, ticklabs2 = Utilities.EqualSpacedTicks(Series2['Data'],10,LogOrLin='log',LabOffset=-100,labSuffix='%')\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # smolFig = Charting.TwoAxisFig(LeftTraces,Series1['YScale'],Series1['axlabel'],"",XTicks=XTickArr,RightTraces=RightTraces,RightScale=Series2['YScale'],\\\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 #                               RYLabel=Series2['axlabel']) # LeftTicks=(ticks,ticklabs),RightTicks=(ticks2,ticklabs2)\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # plot = smolFig.axes[0]; plotb = smolFig.axes[1]\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # plotb.tick_params(axis='y',which='both',color=Series2['TraceColor'],labelcolor=Series2['TraceColor'])\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # plotb.set_ylabel(Series2['axlabel'],fontweight='bold',color=Series2['TraceColor'])\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # plotb.spines['right'].set_color(Series2['TraceColor']) \cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # #plot.set_ylim(ymin=-0.001,ymax=0.001)  \cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # plot.axhline(y=0,color='red',lw=1,ls=':')\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # plotb.axhline(y=0,color='green',lw=1,ls=':')\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # maxY1 = Series1['Ymax']; maxY2 = Series2['Ymax']\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # print(maxY1,maxY2)\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 # plot.tick_params(axis='y',which='both',length=0,labelsize=0,left=False,labelleft=False)\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # plot.set_yticks(ticks); plot.set_yticklabels(ticklabs)\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # plot.tick_params(axis='y',which='major',length=3,labelsize=9,left=True,labelleft=True)\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # if pd.isna(maxY1):\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 #     pass\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # else:\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 #     plot.set_ylim(Series1['Data'].min(),int(maxY1))\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # if pd.isna(maxY2):\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 #     pass\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 # else:\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 #     plotb.set_ylim(Series2['Data'].min(),int(maxY2))\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 # else:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     ################# Up to 5 axis figure ##########################################################################################################\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     fig = plt.figure(num="Macro Data",figsize=(13.5,6.5), tight_layout=True); i = 0\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     gs = GridSpec(1, 1, top = Top, bottom=0.08,left=0.06,right=1-(numAxii*0.04))\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     CheckAxis = []\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     print(SeriesDict.keys())\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     for series in SeriesDict.keys(): \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #         TheSeries = SeriesDict[series]; Data = pd.Series(TheSeries['Data']); TraceType = str(TheSeries['UnitsType']); Ymax = TheSeries['Ymax']\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #         print(i,TheSeries['Name'],TheSeries['Axis'],Data)   ####Trying to figure out how to get plots on the right axis and have some on the same axis. \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #         print(CheckAxis,len(CheckAxis),TheSeries['Axis'] in CheckAxis) \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #         if len(CheckAxis) == 0:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             print('Plotting new Axis.', TheSeries['Axis'],TheSeries['TraceColor'],TheSeries['Name'],i)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             ax1 = fig.add_subplot(gs[0]); ax1.plot(TheSeries['Data'],color=TheSeries['TraceColor'],label=TheSeries['Legend_Name'],lw=2.5)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             ax1.spines['left'].set_linewidth(1.5); ax1.grid(visible=True,which='major',axis='y')\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             ax1.tick_params(axis='y',labelsize=8,color=TheSeries['TraceColor'],labelcolor=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             ax1.set_yscale(TheSeries['YScale']); ax1.set_xlim(StartDate,EndDate) \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             if pd.isna(Ymax):\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 pass\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             else:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax1.set_ylim(TheSeries['Data'].min(),int(Ymax))\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             if TraceType.upper() == YoYStr.upper():\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax1.set_ylabel(r'YoY $\\Delta$ %',fontweight='bold',color=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             elif TraceType.upper() == devStr.upper():\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax1.set_ylabel('Deviation from trend (%)',fontweight='bold',color=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             else:  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 if pd.isna(TheSeries['axlabel']):   \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     ax1.set_ylabel(TheSeries['SeriesInfo']['units_short'],fontweight='bold',color=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 else:    \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     ax1.set_ylabel(TheSeries['axlabel'],fontweight='bold',color=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 #         elif len(CheckAxis) > 0: \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             if (TheSeries['Axis'] in CheckAxis) and (TheSeries['Axis'] == 'ax1'): \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 print('Adding to plot ax1')\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax1.plot(TheSeries['Data'],color=TheSeries['TraceColor'],label=TheSeries['Legend_Name'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             if (TheSeries['Axis'] in CheckAxis) is False and (TheSeries['Axis'] == 'ax2'):\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 print('Plotting new Axis.', TheSeries['Axis'],TheSeries['TraceColor'],TheSeries['Name'],i)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax2 = ax1.twinx(); ax2.plot(TheSeries['Data'],color=TheSeries['TraceColor'],label=TheSeries['Legend_Name'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax2.spines['right'].set_linewidth(1.5); ax2.spines['right'].set_color(TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax2.tick_params(axis='y',labelsize=8,which='both',color=TheSeries['TraceColor'],labelcolor=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax2.set_yscale(TheSeries['YScale'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 if pd.isna(Ymax):\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     pass\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 else:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     ax2.set_ylim(TheSeries['Data'].min(),int(Ymax))\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 if TraceType.upper() == YoYStr.upper():\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     ax2.set_ylabel(r'YoY $\\Delta$ %',fontweight='bold',color=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 else:  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     if pd.isna(TheSeries['axlabel']):   \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                         ax2.set_ylabel(TheSeries['SeriesInfo']['units_short'],fontweight='bold',color=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     else:    \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                         ax2.set_ylabel(TheSeries['axlabel'],fontweight='bold',color=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             elif (TheSeries['Axis'] in CheckAxis) and (TheSeries['Axis'] == 'ax2'):\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 print('Adding to plot ax2')\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax2.plot(TheSeries['Data'],color=TheSeries['TraceColor'],label=TheSeries['Legend_Name']) \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             if (TheSeries['Axis'] in CheckAxis) is False and (TheSeries['Axis'] == 'ax3'):\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 print('Plotting new Axis.', TheSeries['Axis'],TheSeries['TraceColor'],TheSeries['Name'],i)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax3 = ax1.twinx(); ax3.plot(TheSeries['Data'],color=TheSeries['TraceColor'],label=TheSeries['Legend_Name'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax3.legend(loc=2,bbox_to_anchor=(0.66,1.06),fontsize='small')\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax3.tick_params(axis='y',labelsize=8,which='both',color=TheSeries['TraceColor'],labelcolor=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax3.set_yscale(TheSeries['YScale']); ax3.spines.right.set_position(("axes", 1.06)); ax3.spines['right'].set_linewidth(1.5)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax3.spines['right'].set_color(TheSeries['TraceColor'])  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 if pd.isna(Ymax):\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     pass\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 else:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     ax3.set_ylim(TheSeries['Data'].min(),int(Ymax))\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 if TraceType.upper() == YoYStr.upper():\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     ax3.set_ylabel(r'YoY $\\Delta$ %',fontweight='bold',color=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 else:  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     if pd.isna(TheSeries['axlabel']):   \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                         ax3.set_ylabel(TheSeries['SeriesInfo']['units_short'],fontweight='bold',color=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     else:    \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                         ax3.set_ylabel(TheSeries['axlabel'],fontweight='bold',color=TheSeries['TraceColor'])   \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             elif (TheSeries['Axis'] in CheckAxis) and (TheSeries['Axis'] == 'ax3'): \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 print('Adding to plot ax3')\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax3.plot(TheSeries['Data'],color=TheSeries['TraceColor'],label=TheSeries['Legend_Name'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             if (TheSeries['Axis'] in CheckAxis) is False and (TheSeries['Axis'] == 'ax4'):\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 print('Plotting new Axis.', TheSeries['Axis'],TheSeries['TraceColor'],TheSeries['Name'],i)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax4 = ax1.twinx(); ax4.plot(TheSeries['Data'],color=TheSeries['TraceColor'],label=TheSeries['Legend_Name'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax4.tick_params(axis='y',labelsize=8,which='both',color=TheSeries['TraceColor'],labelcolor=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax4.set_yscale(TheSeries['YScale']); ax4.spines.right.set_position(("axes", 1.13)); ax4.spines['right'].set_linewidth(1.5)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax4.spines['right'].set_color(TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 if pd.isna(Ymax):\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     pass\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 else:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     ax4.set_ylim(TheSeries['Data'].min(),int(Ymax))\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 if TraceType.upper() == YoYStr.upper():\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     ax4.set_ylabel(r'YoY $\\Delta$ %',fontweight='bold',color=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 else:  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     if pd.isna(TheSeries['axlabel']):   \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                         ax4.set_ylabel(TheSeries['SeriesInfo']['units_short'],fontweight='bold',color=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     else:    \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                         ax4.set_ylabel(TheSeries['axlabel'],fontweight='bold',color=TheSeries['TraceColor'])   \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             elif (TheSeries['Axis'] in CheckAxis) and (TheSeries['Axis'] == 'ax4'):  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 print('Adding to plot ax4')\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax4.plot(TheSeries['Data'],color=TheSeries['TraceColor'],label=TheSeries['Legend_Name'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             if (TheSeries['Axis'] in CheckAxis) is False and (TheSeries['Axis'] == 'ax5'):\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 print('Plotting new Axis.', TheSeries['Axis'],TheSeries['TraceColor'],TheSeries['Name'],i)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax5 = ax1.twinx(); ax5.plot(TheSeries['Data'],color=TheSeries['TraceColor'],label=TheSeries['Legend_Name'])  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax5.tick_params(axis='y',labelsize=8,which='both',color=TheSeries['TraceColor'],labelcolor=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax5.set_yscale(TheSeries['YScale']); ax5.spines.right.set_position(("axes", 1.2)); ax5.spines['right'].set_linewidth(1.5)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax5.spines['right'].set_color(TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 if pd.isna(Ymax):\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     pass\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 else:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     ax5.set_ylim(TheSeries['Data'].min(),int(Ymax))\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 if TraceType.upper() == YoYStr.upper():\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     ax5.set_ylabel(r'YoY $\\Delta$ %',fontweight='bold',color=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 else:  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     if pd.isna(TheSeries['axlabel']):   \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                         ax5.set_ylabel(TheSeries['SeriesInfo']['units_short'],fontweight='bold',color=TheSeries['TraceColor'])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                     else:    \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                         ax5.set_ylabel(TheSeries['axlabel'],fontweight='bold',color=TheSeries['TraceColor']) \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             elif (TheSeries['Axis'] in CheckAxis) and (TheSeries['Axis'] == 'ax5'):  \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 print('Adding to plot ax5')\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax5.plot(TheSeries['Data'],color=TheSeries['TraceColor'],label=TheSeries['Legend_Name'])   \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #         else:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             print('1: What')        \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #         CheckAxis.append(TheSeries['Axis']); i += 1\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     plt.minorticks_on() \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     for axis in ['top','bottom','left','right']:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #                 ax1.spines[axis].set_linewidth(1.5)   \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     j = 0\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     for axes in fig.axes:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #         axes.margins(0.03,0.03)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #         if j < 3:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             axes.legend(loc=2,bbox_to_anchor=(0.4*j,1.06),fontsize='small')\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #         else: \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             axes.legend(loc=2,bbox_to_anchor=(0.4*(j-3),1.12),fontsize='small')\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #         for line in axes.lines:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #             j += 1  \cf4 \cb1 \strokec4 \
}